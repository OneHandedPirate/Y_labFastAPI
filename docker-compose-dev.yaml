version: "3.8"
services:
  app:
    container_name: ylab_fastapi
    build:
      context: .
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      RABBIT_HOST: "${RABBIT_HOST}"
      RABBIT_VHOST: "${RABBIT_VHOST}"
      RABBIT_USER: "${RABBIT_USER}"
      RABBIT_PASSWORD: "${RABBIT_PASSWORD}"
    entrypoint: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0"
    ports:
      - "8000:8000"
    networks:
      - custom
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: "ylab_project_db"
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - custom
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${POSTGRES_USER}", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 3s
      timeout: 10s
      retries: 10

  redis:
    container_name: "redis"
    image: redis:7.0-alpine
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - custom


  rabbit:
    container_name: "rabbit"
    image: rabbitmq:alpine
    environment:
      RABBITMQ_DEFAULT_VHOST: "${RABBIT_VHOST}"
      RABBITMQ_DEFAULT_USER: "${RABBIT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBIT_PASSWORD}"
    networks:
      - custom

  celery:
    container_name: "celery"
    build:
      context: .
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      RABBIT_HOST: "${RABBIT_HOST}"
      RABBIT_VHOST: "${RABBIT_VHOST}"
      RABBIT_USER: "${RABBIT_USER}"
      RABBIT_PASSWORD: "${RABBIT_PASSWORD}"
    command: celery -A app.celery.celeryconfig worker -l info -B
    volumes:
      - /home/onehandedpirate/Python/RestaurantFastAPI/app/admin:/code/app/admin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - custom

networks:
  custom:
    driver: bridge
